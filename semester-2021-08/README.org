Group meeting schedule, Fall 2021

Mondays 3-4pm, second floor meeting room in building 90 (SICCS).

1. your research.
2. somebody else's paper.
3. some useful software.

- Aug 16: Toby, Talk 1: [[file:2021-08-15-research-projects.org][How I organize my research projects]]. Talk 2:
  [[https://raw.githubusercontent.com/tdhock/functional-pruning-theory/master/HOCKING-recent-advances.pdf][Recent advances in supervised optimal changepoint detection]].
  Abstract: Changepoint detection involves detecting abrupt changes in
  data sequences measured over space or time. Although there are many
  classical unsupervised algorithms for this problem, several of my
  recent research projects have involved proposing new supervised
  labeling methods and optimization algorithms. In this talk I will
  give an overview of these recent advances, with a discussion of
  applications in various problem domains (medicine, genomics,
  neuroscience).
- Aug 23: Akhila [[https://github.com/akhikolla/akhikolla.github.io/blob/master/ml_lab_Slides.pdf][ Slides]], [[https://akhikolla.github.io./][Blog]].
[[https://github.com/akhikolla/RcppDeepState][Title]]: RcppDeepState, a simple way to fuzz test Rcpp packages. 

Abstract: R packages written in the widely used Rcpp framework are typically tested using expected input/output pairs that are manually coded by package developers. These manually written tests are validated under various CRAN checks, using both static and dynamic analysis.Such manually written tests allow for subtle bugs since they do not anticipate all possible inputs and miss important code paths.Fuzzers pass random, unexpected, potentially invalid inputs to a function, in order to identify bugs missed by manually written tests.This paper presents RcppDeepState, an R package that uses the DeepState framework to provide automatic fuzzing and symbolic execution for R packages written using the Rcpp framework.Using RcppDeepState, a package developer can systematically fuzz test their Rcpp functions, without having to manually write any inputs nor expected outputs.Randomly generated inputs are passed to each Rcpp function, and Valgrind is used to check for various memory access violations and memory leaks.In our system, a single test harness C++ code file can be used to fuzz test an Rcpp function using different backend fuzzers including AFL, libFuzzer, and HonggFuzz.For even more flexibility, R package developers can write their own random generation functions and assertions.We implemented random generation functions for 8 of the most common Rcpp data types, then used these functions to fuzz test 1,185 Rcpp packages. Valgrind reported issues for more than 2,000 functions (over nearly 500 packages) that were not detected using standard CRAN checks on manually specified test/example inputs.
- Sept 3: Cam [[https://drive.google.com/open?id=1qLBgxIdEUdpv3KuB2y5SbD-ukwDAvTjw&authuser=csb67%40nau.edu&usp=drive_fs][Slides]]

Title: “Automated mapping of Gulf Sturgeon spawning habitat in Coastal Plain Rivers: Case study in the Pearl and Pascagoula River Systems”
Abstract: Gulf sturgeon (Acipenser oxyrinchus desotoi) are a threatened anadromous fish species with spawning populations found in seven Gulf of Mexico coastal plain rivers (east to west: Suwannee, Apalachicola, Choctawhatchee, Yellow, Escambia/Conecuh, Pascagoula, and Pearl/Bogue Chitto rivers).  Relatively little is known about spawning habitats located in the Pearl and Pascagoula river systems as only one confirmed spawning location has been identified.  Characterizing, locating, and quantifying existing suitable spawning habitat is critical to species recovery and restoration efforts.  This research effort will locate and quantify suitable spawning habitat by developing tools and software for processing side scan sonar data and apply (semi-) automated procedures for benthic feature classification, assess spawning habitat accessibility and use patterns, and synthesize data needed to evaluate and prioritize spawning habitat restoration projects.  

- Sept 10: Kyle

https://www.spiedigitallibrary.org/journals/journal-of-applied-remote-sensing/volume-15/issue-3/038503/Machine-learning-based-region-of-interest-detection-in-airborne-lidar/10.1117/1.JRS.15.038503.full

https://www.spie.org/news/machine-learning-speeds-up-lidar-analysis-for-fishery-surveys?SSO=1 - brief news article
Title : Airborne lidar data for fishery surveys often do not contain physics-based features that can be used to identify fish; consequently, the fish must be manually identified, which is a time-consuming process. To reduce the time required to identify fish, supervised machine learning was successfully applied to lidar data from fishery surveys to automate the process of identifying regions with a high probability of containing fish. Using data from Yellowstone Lake and the Gulf of Mexico, multiple experiments were run to simulate real-world scenarios. Although the human cannot be fully removed from the loop, the amount of data that would require manual inspection was reduced by 61.14% and 26.8% in the Yellowstone Lake and Gulf of Mexico datasets, respectively.
- Sept 17: Tristan
- Sept 24: NO MEETING :(
- October 1: Shadmaan
- Oct 8: Brooke
- Oct 15
- Oct 22
- Oct 29
- Nov 5
- Nov 12
- Nov 19
- Nov 26
