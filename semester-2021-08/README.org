Group meeting schedule, Fall 2021

Mondays 3-4pm, second floor meeting room in building 90 (SICCS).

1. your research.
2. somebody else's paper.
3. some useful software.

- Aug 16: Toby, Talk 1: [[file:2021-08-15-research-projects.org][How I organize my research projects]]. Talk 2:
  [[https://raw.githubusercontent.com/tdhock/functional-pruning-theory/master/HOCKING-recent-advances.pdf][Recent advances in supervised optimal changepoint detection]].
  Abstract: Changepoint detection involves detecting abrupt changes in
  data sequences measured over space or time. Although there are many
  classical unsupervised algorithms for this problem, several of my
  recent research projects have involved proposing new supervised
  labeling methods and optimization algorithms. In this talk I will
  give an overview of these recent advances, with a discussion of
  applications in various problem domains (medicine, genomics,
  neuroscience).
- Aug 23: Akhila [[https://github.com/akhikolla/akhikolla.github.io/blob/master/ml_lab_Slides.pdf][ Slides]], [[https://akhikolla.github.io./][Blog]].
[[https://github.com/akhikolla/RcppDeepState][Title]]: RcppDeepState, a simple way to fuzz test Rcpp packages. 

Abstract: R packages written in the widely used Rcpp framework are typically tested using expected input/output pairs that are manually coded by package developers. These manually written tests are validated under various CRAN checks, using both static and dynamic analysis.Such manually written tests allow for subtle bugs since they do not anticipate all possible inputs and miss important code paths.Fuzzers pass random, unexpected, potentially invalid inputs to a function, in order to identify bugs missed by manually written tests.This paper presents RcppDeepState, an R package that uses the DeepState framework to provide automatic fuzzing and symbolic execution for R packages written using the Rcpp framework.Using RcppDeepState, a package developer can systematically fuzz test their Rcpp functions, without having to manually write any inputs nor expected outputs.Randomly generated inputs are passed to each Rcpp function, and Valgrind is used to check for various memory access violations and memory leaks.In our system, a single test harness C++ code file can be used to fuzz test an Rcpp function using different backend fuzzers including AFL, libFuzzer, and HonggFuzz.For even more flexibility, R package developers can write their own random generation functions and assertions.We implemented random generation functions for 8 of the most common Rcpp data types, then used these functions to fuzz test 1,185 Rcpp packages. Valgrind reported issues for more than 2,000 functions (over nearly 500 packages) that were not detected using standard CRAN checks on manually specified test/example inputs.
- Sept 3: Cam
- Sept 10: LABOR DAY
- Sept 17: Kyle
- Sept 24: Tristan
- Sept 27: Shadmaan
- Oct 1: Brooke
- Oct 8 
- Oct 15
- Oct 22
- Oct 29
- Nov 5
- Nov 12
- Nov 19
- Nov 26
